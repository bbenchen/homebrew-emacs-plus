diff --git a/src/frame.h b/src/frame.h
index 62b2edcb315..49b9829a6b1 100644
--- a/src/frame.h
+++ b/src/frame.h
@@ -71,7 +71,8 @@ enum ns_appearance_type
   {
     ns_appearance_system_default,
     ns_appearance_aqua,
-    ns_appearance_vibrant_dark
+    ns_appearance_vibrant_dark,
+    ns_appearance_dark_aqua
   };
 #endif
 #endif /* HAVE_WINDOW_SYSTEM */
diff --git a/src/nsterm.m b/src/nsterm.m
index 5514a693c86..913024fa7a7 100644
--- a/src/nsterm.m
+++ b/src/nsterm.m
@@ -1935,11 +1935,25 @@ Hide the window (X11 semantics)
 ns_set_appearance_1 (struct frame *f, Lisp_Object new_value)
 {
   if (EQ (new_value, Qdark))
-    FRAME_NS_APPEARANCE (f) = ns_appearance_vibrant_dark;
+    {
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 101400
+#ifndef NSAppKitVersionNumber10_14
+#define NSAppKitVersionNumber10_14 1671
+#endif
+      if (NSAppKitVersionNumber >= NSAppKitVersionNumber10_14)
+        FRAME_NS_APPEARANCE(f) = ns_appearance_dark_aqua;
+      else
+#endif /* MAC_OS_X_VERSION_MAX_ALLOWED >= 101400 */
+        FRAME_NS_APPEARANCE(f) = ns_appearance_vibrant_dark;
+    }
   else if (EQ (new_value, Qlight))
+    {
     FRAME_NS_APPEARANCE (f) = ns_appearance_aqua;
+    }
   else
+    {
     FRAME_NS_APPEARANCE (f) = ns_appearance_system_default;
+    }
 }
 
 void
@@ -5958,6 +5972,7 @@ Needs to be here because ns_initialize_display_info () uses AppKit classes.
 
    ========================================================================== */
 
+static const void *kEmacsAppKVOContext = &kEmacsAppKVOContext;
 
 @implementation EmacsApp
 
@@ -6245,6 +6260,18 @@ - (void)applicationDidFinishLaunching: (NSNotification *)notification
 	 object:nil];
 #endif
 
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= 101400
+  [self addObserver:self
+         forKeyPath:NSStringFromSelector(@selector(effectiveAppearance))
+            options:NSKeyValueObservingOptionInitial|NSKeyValueObservingOptionNew
+            context:&kEmacsAppKVOContext];
+
+   pending_funcalls = Fcons(list3(Qrun_hook_with_args,
+                                  Qns_system_appearance_change_functions,
+                                  Vns_system_appearance),
+                            pending_funcalls);
+#endif
+
 #ifdef NS_IMPL_COCOA
   /* Some functions/methods in CoreFoundation/Foundation increase the
      maximum number of open files for the process in their first call.
@@ -6283,6 +6310,68 @@ - (void)antialiasThresholdDidChange:(NSNotification *)notification
 #endif
 }
 
+- (void)observeValueForKeyPath:(NSString *)keyPath
+                      ofObject:(id)object
+                        change:(NSDictionary *)change
+                       context:(void *)context
+{
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= 101400
+  if (context == kEmacsAppKVOContext
+      && object == self
+      && [keyPath isEqualToString:
+                    NSStringFromSelector (@selector(effectiveAppearance))])
+    [self systemAppearanceDidChange:
+               [change objectForKey:NSKeyValueChangeNewKey]];
+  else
+#endif /* (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= 101400 */
+    [super observeValueForKeyPath:keyPath
+                         ofObject:object
+                           change:change
+                          context:context];
+}
+
+#if defined (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= 101400
+#ifndef NSAppKitVersionNumber10_14
+#define NSAppKitVersionNumber10_14 1671
+#endif
+- (void)systemAppearanceDidChange:(NSAppearance *)newAppearance
+{
+
+  if (NSAppKitVersionNumber < NSAppKitVersionNumber10_14)
+    return;
+
+  NSAppearanceName appearance_name =
+      [newAppearance bestMatchFromAppearancesWithNames:@[
+        NSAppearanceNameAqua, NSAppearanceNameDarkAqua
+      ]];
+
+  BOOL is_dark_appearance =
+    [appearance_name isEqualToString:NSAppearanceNameDarkAqua];
+  Vns_system_appearance = is_dark_appearance ? Qdark : Qlight;
+
+  run_system_appearance_change_hook ();
+}
+
+static inline void run_system_appearance_change_hook (void)
+{
+  if (NILP (Vns_system_appearance_change_functions))
+    return;
+
+  block_input ();
+
+  bool owfi = waiting_for_input;
+  waiting_for_input = false;
+
+  safe_calln (Qrun_hook_with_args,
+          Qns_system_appearance_change_functions,
+          Vns_system_appearance);
+  Fredisplay(Qt);
+
+  waiting_for_input = owfi;
+
+  unblock_input ();
+}
+#endif /* (NS_IMPL_COCOA) && MAC_OS_X_VERSION_MAX_ALLOWED >= 101400 */
 
 /* Termination sequences:
     C-x C-c:
@@ -6455,6 +6544,14 @@ - (void)applicationDidResignActive: (NSNotification *)notification
   ns_send_appdefined (-1);
 }
 
+- (void)applicationWillTerminate:(NSNotification *)notification
+{
+  NSTRACE ("[EmacsApp applicationWillTerminate:]");
+
+  [self removeObserver:self
+            forKeyPath:NSStringFromSelector(@selector(effectiveAppearance))
+               context:&kEmacsAppKVOContext];
+}
 
 
 /* ==========================================================================
@@ -9728,7 +9825,7 @@ - (id)accessibilityAttributeValue:(NSString *)attribute
   NSTRACE ("[EmacsWindow accessibilityAttributeValue:]");
 
   if ([attribute isEqualToString:NSAccessibilityRoleAttribute])
-    return NSAccessibilityTextFieldRole;
+    return NSAccessibilityWindowRole;
 
   if ([attribute isEqualToString:NSAccessibilitySelectedTextAttribute]
       && curbuf && ! NILP (BVAR (curbuf, mark_active)))
@@ -9971,17 +10068,26 @@ - (void)setAppearance
 #define NSAppKitVersionNumber10_10 1343
 #endif
 
-  if (NSAppKitVersionNumber < NSAppKitVersionNumber10_10)
-    return;
-
-  if (FRAME_NS_APPEARANCE (f) == ns_appearance_vibrant_dark)
-    appearance =
-      [NSAppearance appearanceNamed:NSAppearanceNameVibrantDark];
-  else if (FRAME_NS_APPEARANCE (f) == ns_appearance_aqua)
-    appearance =
-      [NSAppearance appearanceNamed:NSAppearanceNameAqua];
+   if (NSAppKitVersionNumber < NSAppKitVersionNumber10_10)
+     return;
 
-  [self setAppearance:appearance];
+#if MAC_OS_X_VERSION_MAX_ALLOWED >= 101400
+#ifndef NSAppKitVersionNumber10_14
+#define NSAppKitVersionNumber10_14 1671
+#endif
+   if (NSAppKitVersionNumber >= NSAppKitVersionNumber10_14
+       && FRAME_NS_APPEARANCE(f) == ns_appearance_dark_aqua)
+     appearance = [NSAppearance appearanceNamed:NSAppearanceNameDarkAqua];
+   else
+#endif /* MAC_OS_X_VERSION_MAX_ALLOWED >= 101400 */
+     if (FRAME_NS_APPEARANCE(f) == ns_appearance_vibrant_dark)
+       appearance =
+         [NSAppearance appearanceNamed:NSAppearanceNameVibrantDark];
+     else if (FRAME_NS_APPEARANCE (f) == ns_appearance_aqua)
+       appearance =
+         [NSAppearance appearanceNamed:NSAppearanceNameAqua];
+
+   [self setAppearance:appearance];
 #endif /* MAC_OS_X_VERSION_MAX_ALLOWED >= 101000 */
 }
 
@@ -11296,6 +11402,25 @@ Nil means use fullscreen the old (< 10.7) way.  The old way works better with
 This variable is ignored on macOS < 10.7 and GNUstep.  Default is t.  */);
   ns_use_mwheel_momentum = YES;
 
+ DEFVAR_LISP ("ns-system-appearance", Vns_system_appearance,
+               doc: /* Current system appearance, i.e. `dark' or `light'.
+
+This variable is ignored on macOS < 10.14 and GNUstep.  Default is nil.  */);
+  Vns_system_appearance = Qnil;
+  DEFSYM(Qns_system_appearance, "ns-system-appearance");
+
+  DEFVAR_LISP ("ns-system-appearance-change-functions",
+               Vns_system_appearance_change_functions,
+     doc: /* List of functions to call when the system appearance changes.
+Each function is called with a single argument, which corresponds to the new
+system appearance (`dark' or `light').
+
+This hook is also run once at startup.
+
+This variable is ignored on macOS < 10.14 and GNUstep.  Default is nil.  */);
+  Vns_system_appearance_change_functions = Qnil;
+  DEFSYM(Qns_system_appearance_change_functions, "ns-system-appearance-change-functions");
+
   /* TODO: Move to common code.  */
   DEFVAR_LISP ("x-toolkit-scroll-bars", Vx_toolkit_scroll_bars,
 	       doc: /* SKIP: real doc in xterm.c.  */);
